#!/bin/bash -e

# Script to submit tb_pipeline_run as an array job 
# Sizes job automatically based on the number of input data directories
# filenames etc. are passed as variables with qsub's -v argument 

# JCA 

usage="Usage: $0 -i /path/to/input/dir -o /path/to/output/dir -r /path/to/reference"
real_path=$(realpath $0)
bin_dir=$(dirname ${real_path})

module load bio-bwa/0.7.15
module load EMBOSS/6.0.1
module load intel-suite
module load picard/2.6.0
module load samtools/1.3.1
module load snpeff/4.3a

while getopts ":i:o:r:h" opt; do
        case $opt in 
                i)
                in_dir=$OPTARG
                ;;
		o)
		out_dir=$OPTARG
		;;
		r)
		ref=$OPTARG
		;;
                h)
                echo $usage
                exit 0
                ;;
                \?)
                echo "Invalid option: -$OPTARG" >&2
                echo $usage >&2
                exit 1
                ;;
        esac
done
shift $((OPTIND-1))

if [ -z ${in_dir} ] || [ -z ${out_dir} ] || [ -z $ref} ]; 
then
    echo $usage
    exit 1
fi

base=$(basename -s .gb ${ref})
dir=$(dirname ${ref})
fasta_ref="${dir}/${base}.fa"

if ! [ -d ${in_dir} ]; 
then
    echo ${in_dir} does not exist
    exit 1
fi;

if ! [ -d ${out_dir} ];
then
    echo 
    echo "Creating output directory ${out_dir}"
    mkdir -v -p ${out_dir}
fi;

if ! [ -e ${ref} ];
then
    echo "Reference ${ref} does not exist"
    exit 1
fi;

if [ "${dir}/${base}" == "${ref}" ];  #situation if basename has not matched suffix
then
    echo "Reference must be in genbank format and  filname suffixed with .gb"
    exit 1
fi;

if ! [ -e "${dir}/${base}.fa" ]
then
    echo "Creating fasta format reference..."
    seqret -auto -outseq ${fasta_ref} ${ref}
fi;

if ! [ -e "${fasta_ref}.bwt" ];
then
    echo
    echo "Building BWA index...";
    echo
    bwa index ${fasta_ref}
fi

if ! [ -e "${fasta_ref}.fai" ];
then
    echo
    echo "Building fasta index...";
    echo
    samtools faidx ${fasta_ref}
fi


if ! [ -e "${dir}/${base}.dict" ];
then
    echo
    echo "Building fasta dictionary...";
    echo
    picard CreateSequenceDictionary R=${fasta_ref} O=${dir}/${base}.dict
fi

#build a snpEff configuration for the reference...
if ! [ -e "${dir}/snpEff.config" ];
then
    echo
    echo "Building snpEff database..."
    echo

    orig_dir=$(pwd)
    organism=$(grep "/organism" ${ref}|awk -F= '{print $2}'|sed 's/"//g')
    locus=$(grep "LOCUS" ${ref}|awk '{print $2}')

    cp ${bin_dir}/../etc/snpEff.config ${dir}
    sed -i "s#__REFDATA__#${dir}#" ${dir}/snpEff.config 

    mkdir ${dir}/${base}
    ln -s ${ref} ${dir}/${base}/genes.gbk

    echo "${base}.genome : ${organism}" >> ${dir}/snpEff.config
    echo "${base}.chromosome : ${locus}" >> ${dir}/snpEff.config
    echo "${base}.${locus}.codonTable: Bacterial_and_Plant_Plastid" >> ${dir}/snpEff.config

    cd ${dir}
    java -jar ${SNPEFF_HOME}/snpEff.jar build -genbank -v ${base}
    cd ${orig_dir}

fi

sample_count=$(ls -1 ${in_dir}|wc -l)

cmd="qsub -J 1-${sample_count}:1 -v bin_dir=${bin_dir},in_dir=${in_dir},out_dir=${out_dir},ref=${fasta_ref},snpeff_db=${base} ${bin_dir}/provar"

echo
echo "running command: ${cmd}"
echo

job_id=$(${cmd})

echo 
echo "Array job ${job_id} submitted with ${sample_count} samples..."
echo

